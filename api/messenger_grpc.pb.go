// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/messenger.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Messenger_PublishMessage_FullMethodName = "/Messenger/PublishMessage"
	Messenger_DeleteMessage_FullMethodName  = "/Messenger/DeleteMessage"
	Messenger_ListMessages_FullMethodName   = "/Messenger/ListMessages"
)

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerClient interface {
	// PublishMessage creates a new message from the MessageBody input parameter and
	// publishes it to the server. The UUID of the new Message is sent back
	// to the client.
	PublishMessage(ctx context.Context, in *MessageBody, opts ...grpc.CallOption) (*UUID, error)
	// DeleteMessage deletes a saved message using its ID.
	DeleteMessage(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Void, error)
	// ListMessages fetches all the messages sent to the public chat and returns a
	// stream of the messages to the client.
	ListMessages(ctx context.Context, in *Void, opts ...grpc.CallOption) (Messenger_ListMessagesClient, error)
}

type messengerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerClient(cc grpc.ClientConnInterface) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) PublishMessage(ctx context.Context, in *MessageBody, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, Messenger_PublishMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) DeleteMessage(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, Messenger_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) ListMessages(ctx context.Context, in *Void, opts ...grpc.CallOption) (Messenger_ListMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[0], Messenger_ListMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerListMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messenger_ListMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messengerListMessagesClient struct {
	grpc.ClientStream
}

func (x *messengerListMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServer is the server API for Messenger service.
// All implementations must embed UnimplementedMessengerServer
// for forward compatibility
type MessengerServer interface {
	// PublishMessage creates a new message from the MessageBody input parameter and
	// publishes it to the server. The UUID of the new Message is sent back
	// to the client.
	PublishMessage(context.Context, *MessageBody) (*UUID, error)
	// DeleteMessage deletes a saved message using its ID.
	DeleteMessage(context.Context, *UUID) (*Void, error)
	// ListMessages fetches all the messages sent to the public chat and returns a
	// stream of the messages to the client.
	ListMessages(*Void, Messenger_ListMessagesServer) error
	mustEmbedUnimplementedMessengerServer()
}

// UnimplementedMessengerServer must be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (UnimplementedMessengerServer) PublishMessage(context.Context, *MessageBody) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedMessengerServer) DeleteMessage(context.Context, *UUID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedMessengerServer) ListMessages(*Void, Messenger_ListMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedMessengerServer) mustEmbedUnimplementedMessengerServer() {}

// UnsafeMessengerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerServer will
// result in compilation errors.
type UnsafeMessengerServer interface {
	mustEmbedUnimplementedMessengerServer()
}

func RegisterMessengerServer(s grpc.ServiceRegistrar, srv MessengerServer) {
	s.RegisterService(&Messenger_ServiceDesc, srv)
}

func _Messenger_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messenger_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).PublishMessage(ctx, req.(*MessageBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Messenger_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).DeleteMessage(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_ListMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengerServer).ListMessages(m, &messengerListMessagesServer{stream})
}

type Messenger_ListMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messengerListMessagesServer struct {
	grpc.ServerStream
}

func (x *messengerListMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// Messenger_ServiceDesc is the grpc.ServiceDesc for Messenger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messenger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _Messenger_PublishMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Messenger_DeleteMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMessages",
			Handler:       _Messenger_ListMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/messenger.proto",
}
